# Thanks for using DMPLib
# The purpose of this is to aid in handling DM Points, or other points that are tracked per user, per server.
# created by:
# Discord: Byronius#0001; GitHub: LazyDope; Ko-Fi: 

_cache = {}
def get_guild_settings(guild: int=ctx.guild.id) -> dict:
    """
    Loads the settings for the server, loads from cache if available.
    :var int guild: The id of the guild to search, will default to the current one. default: ctx.guild.id
    :return: The settings to be used.
    :rtype: dict
    """
    # try to load from cache
    if 'serv_settings' in _cache:
        return _cache['serv_settings'][guild]
    
    # load settings uvar
    settings = _get_all_serv_settings(cache_results=False)
    
    settings[guild] = {'dmp_types': {"DM Point": {"rate": [1,1], "min": 0, "max": float('inf')}}} | settings.get(guild, {})
    _cache['serv_settings'] = settings
    return _cache['serv_settings'][guild]

def _get_all_serv_settings(*args, cache_results: bool=True) -> dict:
    """
    Loads all server settings from cache or from uvar.
    :var bool cache_results: whether to cache the results
    :return: all known servers settings
    :rtype: dict
    """
    # try to load from cache
    if 'serv_settings' in _cache:
        return _cache['serv_settings']
    
    # load yaml from uvar
    settings = load_yaml(get_uvar('dmp_server_settings',"{}"))
    
    if ctx.guild.id:
        settings[ctx.guild.id] = {'name':ctx.guild.name}
        dmp_types = dict(load_yaml(svar)) if (svar:=get_svar('dmp_types')) else {}
        for type in dmp_types.values():
            type.update({'min':0, 'max': float('inf')} | type)
            if 'rate' in type:
                rate = _valid_pair(type['rate'])
                if rate:
                    type['rate'] = rate
        settings[ctx.guild.id] |= {'dmp_types':dmp_types} if dmp_types else {}
        set_uvar('dmp_server_settings', dump_yaml(settings))
    
    if cache_results:
        _cache['serv_settings'] = settings
    
    return settings

def _valid_pair(inp_str: str, splitter: str=":", filler: float=1.0) -> [float, float]:
    """
    Ensures the input is a valid ratio and returns it as a list.
    :arg str inp_str: the input ratio as a string
    :var str splitter: what to split the pair by default: ":"
    :var float filler: what to fill in the space by if the input is not a pair
    :return: the ratio
    :rtype: [float, float]
    """
    try:
        ratio = [float(x) for i, x in enumerate(inp_str.split(splitter)) if i < 2]
        while len(ratio)<2:
            ratio.append(filler)
        return ratio
    except:
        return []
    
def get_dmp_type(guild: int, dmp_type: str=None) -> str:
    """
    Gets a valid DM Points type
    :arg int guild: the guild to pull settings for
    :var str dmp_type: what type to search for, returns the first if None default: None
    :return: known DM Points type for the guild
    :rtype: str
    """
    settings = get_guild_settings(guild)
    if dmp_type:
        types = [type for type in settings['dmp_types'] if logtools.make_plural(dmp_type).lower() in type.lower()]
        return types[0] if types else list(settings['dmp_types'])[0]
    else:
        return list(settings['dmp_types'])[0]
        

def to_id(inp: str) -> int:
    """
    Takes a string and returns a matching guild ID if one is found.
    :arg str inp: the string to try to match
    :return: the guild id
    :rtype: int
    """
    if not inp:
        return None
    known_settings = _get_all_serv_settings()
    if inp.isdecimal() and int(inp) in known_settings:
        return int(inp)
    itemized = known_settings.items()
    if (possible_ids := [x for x, y in itemized if inp.lower() in y.get('name','').lower() or inp.lower() in y.get('nick','').lower()]):
        return possible_ids[0]
    return None

def get_dmp_storage() -> dict:
    """
    Load the DM Points or similar from the uvar.
    :return: the DM Points for each server that have had DM Points used.
    :rtype: dict
    """
    if 'storage' in _cache:
        return _cache['storage']
    storage = load_yaml(get_uvar('dmp_storage', "{}"))
    _cache['storage'] = storage
    return _cache['storage']

def get_guild_storage(storage: dict, guild: int=ctx.guild.id) -> dict:
    """
    Loads the DM Points storage for a specific guild.
    :arg dict storage: the full storage dict
    :var int guild: the id of the guild to load. default: ctx.guild.id
    :return: the current dmp and total converted for the guild
    :rtype: dict
    """
    settings = get_guild_settings(guild)
    if guild not in storage:
        storage[guild] = {}
    storage[guild].update({dmp_type: {'current': 0.0} for dmp_type in settings['dmp_types'] if dmp_type not in storage[guild]})
    _cache['storage'] = storage
    return storage[guild]

def update_storage(dmp_dict: dict):
    """
    Saves the updated storage
    :arg dict dmp_dict: the full dict for the dmp storage.
    """
    _cache['storage'] = dmp_dict
    set_uvar('dmp_storage', dump_yaml(dmp_dict))

def set_dmp(value: int|float, log_message: str=None, dmp_type: str=None, guild: int=ctx.guild.id) -> (float, list, list):
    """
    Sets the current DM Points to an exact value.
    :arg int|float value: the new value
    :var str log_message: the message to be added to the log, `[value]` and `[total]` will be replaced with the input value default: None
    :var str dmp_type: the type of DM Points you want to interact with. default: dmp_types[0]
    :var int guild: The id for the guild to use. default: ctx.guild.id
    :return: the value set and a list of the log messages added and removed, if any.
    :rtype: (float, list, list)
    """
    # load stuff
    using(logtools="11743454-0aca-46a6-ad73-9b902a65fbeb")
    settings = get_guild_settings(guild)
    dmp_type = dmp_type if dmp_type in settings['dmp_types'] else list(settings['dmp_types'])[0]
    type_sets = settings['dmp_types'][dmp_type]
    limit = type_sets.get
    
    # check limits
    if not (limit[0] <= value <= limit[1]):
        return None, [], []
    
    # add log message
    value_str = logtools.round_nicely(value)
    
    log_message = f"Set {dmp_type} to {value_str}" if log_message is None else str(log_message).replace("[value]", value_str).replace("[total]", value_str).replace("[type]", dmp_type)
    added, removed = logtools.log(log_message, f"dmp_log_{guild}")
    
    # update storage
    storage = get_dmp_storage()
    storage[guild] |= {dmp_type: float(value_str)}
    
    # update saved values
    update_storage(storage)
    return float(value_str), added, removed

def modify_dmp(value: int|float, log_message: str=None, dmp_type: str=None, guild: int=ctx.guild.id) -> (float, list, list):
    """
    Modifies the DM Points by the given value.
    :arg int|float value: value to modify by
    :var str log_message: the message to be added to the log, `[value]` will be replaced with the input value. `[total]` will be replaced with the total xp. default: None
    :var str dmp_type: the type of DM Points you want to interact with. default: dmp_types[0]
    :var int guild: The id for the guild to use. default: ctx.guild.id
    :return: the new total and a list of the log messages removed, if any.
    :rtype: (float, list, list)
    """
    # load stuff
    using(logtools="11743454-0aca-46a6-ad73-9b902a65fbeb")
    settings = get_guild_settings(guild)
    limit = settings['dmp_limit']
    
    # load current values
    storage = get_dmp_storage()
    dmp_type = dmp_type if dmp_type in settings['dmp_types'] else settings['dmp_types'][0]
    c_val = get_guild_storage(storage, guild)
    c_val[dmp_type] = float(logtools.round_nicely(c_val[dmp_type] + value))
    
    # verify within limits
    if not (limit[0] <= c_val[dmp_type] <= limit[1]):
        return None, [], []
    
    # add log message
    value_str = logtools.round_nicely(value)
    new_str = logtools.round_nicely(c_val[dmp_type])
    log_message = f"{dmp_type}: {value_str}" if log_message is None else str(log_message).replace("[value]", value_str).replace("[total]", new_str).replace("[type]", dmp_type)
    added, removed = logtools.log(log_message, f"dmp_log_{guild}")
    
    # update saved values
    update_storage(storage)
    return new_val, added, removed
