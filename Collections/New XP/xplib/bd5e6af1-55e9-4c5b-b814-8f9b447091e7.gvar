# Thanks for using XPLib
# created by:
# Discord: byronius; GitHub: LazyDope; Ko-Fi: alazydope

using(logtools="11743454-0aca-46a6-ad73-9b902a65fbeb")
COUNTER = "xp"


def update_old(ch=character()):
    """
    Converts CC into cvar.
    :var ch: the character default: character()
    """
    cc = cc_name(ch)
    if ch.cc_exists(cc):
        if ch.get_cc(cc) > 0:
            ch.set_cvar_nx(COUNTER, str(ch.get_cc(cc)))
        ch.delete_cc(cc)


def get_xp(ch=character()) -> float:
    """
    Load the XP or similar from the cvar.
    :var ch: the character default: character()
    :return: the XP or the like the current character has.
    :rtype: float
    """
    update_old(ch)
    return float(ch.cvars.get(COUNTER, "0"))


def set_xp(
    value: int | float,
    log_message: str = None,
    ch=character(),
    return_added: bool = False
) -> (float, [(int, str)]) | (float, [(int, str)], (int, str)):
    """
    Sets the cvar to a new value.
    :arg int|float value: the new value
    :var str log_message: the message to be added to the log, `[value]` and `[total]` will be replaced with the input value default: "Set value to [value]"
    :var ch: the character default: character()
    :var bool return_added: whether to return the added message default: False
    :return: the value set and a list of the log messages removed, if any.
    :rtype: (float, [(int, str)])
    """
    update_old(ch)
    value_str = logtools.round_nicely(value)
    log_message = f"Total set to {value_str}" if log_message is None else str(log_message).replace("[value]", value_str).replace("[total]", value_str)
    added, removed = logtools.log(log_message, "xplog", sep="", ch=ch)
    ch.set_cvar(COUNTER, value_str)
    if return_added:
        return float(value_str), removed, added
    return float(value_str), removed


def modify_xp(
    value: int | float,
    log_message: str = None,
    ch=character(),
    return_added=False
) -> (float, [(int, str)]) | (float, [(int, str)], (int, str)):
    """
    Modifies the cvar by the given value.
    :arg int|float value: value to modify by
    :var str log_message: the message to be added to the log, `[value]` will be replaced with the input value. `[total]` will be replaced with the total xp. default: "[value]"
    :var ch: the character default: character()
    :var bool return_added: whether to return the added message default: False
    :return: the new total and a list of the log messages removed, if any.
    :rtype: (float, [(int, str)])
    """
    c_val = get_xp(ch)
    new_val = c_val + value
    value_str = logtools.round_nicely(value)
    new_str = logtools.round_nicely(new_val)
    log_message = f"{value_str}" if log_message is None else str(log_message).replace("[value]", value_str).replace("[total]", new_str)
    added, removed = logtools.log(log_message, "xplog", sep="", ch=ch)
    ch.set_cvar(COUNTER, new_str)
    if return_added:
        return float(new_str), removed, added
    return float(new_str), removed


def next_lvl(xp: float = None, ch=character()) -> (int, float, float):
    """
    Gets the next level for a character.
    :var float xp: the xp to compare for the difference, generally passed from another function. default: None
    :var ch: the character default: character()
    :return: the next level, the xp needed for the next level, and the difference between that and the current value.
    :rtype: (int, float, float)
    """
    total = totals(ch)
    c_level = ch.levels.total_level
    xp = get_xp(ch) if xp is None else xp
    index = min(c_level, len(total)-1)
    return index+1, float(total[index]), float(total[index]-xp)


def level(lvl: int = None, xp: float = None, ch=character()) -> (int, float, float):
    """
    Gets the values for a specific level.
    If `lvl` is given, will return itself, xp needed for that level, and the difference between that and given or current xp. If `xp` is present but `lvl` is not, will return what level a character would be if they had that much xp, itself, and the difference between the needed xp for that level, and the xp given. If neither are provided it will return the player's level, how much xp they needed to be that level, and how much xp they are above that.
    :var int lvl: the level you want information about default: None
    :var float xp: the xp value to override loading it again default: None
    :var ch: the character default: character()
    :return: A level, a total xp, and a difference between the level's xp and the total.
    :rtype: (int, float, float)
    """
    total = totals(ch)
    if lvl is not None:
        index = min(int(lvl)-1, len(total)-1)
        c_xp = get_xp(ch) if xp is None else xp
        xp = total[index]
        xp_diff = xp - c_xp
    elif xp is not None:
        index, l_xp = max(enumerate(total), key=lambda x: x[1] if x[1] <= xp else 0)
        lvl = index+1
        xp_diff = l_xp-xp
    else:
        lvl = ch.levels.total_level
        index = min(int(lvl)-1, len(total)-1)
        xp = total[index]
        xp_diff = total[index]-get_xp(ch)
    return lvl, float(xp), float(xp_diff)


def totals(ch=character()) -> [int]:
    """
    Gets the xp totals needed for each level.
    Also saves the server's totals to a cvar so they can be used in DMs.
    :var ch: the character
    :return: a list of integers representing the xp needed for each level
    :rtype: [int]
    """
    totals = [
        int(x.strip()) for x in (
            (svar := get_svar("xptotals"))
            or ch.get_cvar(
                "xptotals",
                "0,300,900,2700,6500,14000,23000,34000,48000,64000,85000,100000,120000,140000,165000,195000,225000,265000,305000,355000"
            )).split(",")
    ]
    if svar:
        ch.set_cvar('xptotals', svar)
    return totals


def xp_name(ch=character()) -> str:
    """
    Gets the xp name to be used.
    Also saves the server's name to a cvar so they can be used in DMs.
    :var ch: the character
    :return: the xp name
    :rtype: str
    """
    xp_name = (svar := get_svar("xpname")) or ch.get_cvar("xpname", "Experience")
    if svar:
        ch.set_cvar('xpname', svar)
    return xp_name


def cc_name(ch=character()) -> str:
    """
    Gets the CC name to be used, used in conversion process.
    :var ch: the character
    :return: the cc name
    :rtype: str
    """
    cc_name = get_svar("xp_ccname") or ch.get_cvar("xp_ccname", "Experience")
    return cc_name
