embed <drac2>
# load constants and arguments
ch = character()
args = [x for x in &ARGS&]
ptargs = "&*&"
n = '\n'
counter = "xp"
using(
    xplib="bd5e6af1-55e9-4c5b-b814-8f9b447091e7",
    logtools="11743454-0aca-46a6-ad73-9b902a65fbeb",
)
cmd = ctx.prefix+ctx.alias


# some handy dandy functions
def print_nice(num: float) -> str:
    return f"{round(num, 2):,}".rstrip("0").rstrip(".")


def ordinal(num: int) -> str:
    num = int(num)
    if 10 <= num <= 19:
        return f"{num}th"
    match num % 10:
        case 1:
            return f"{num}st"
        case 2:
            return f"{num}nd"
        case 3:
            return f"{num}rd"
        case _:
            return f"{num}th"


# define sub commands
subcs = {
    'chart': False,
    'log': False,
    'set': False,
    'help?': False,
    'options': False,
}

if args:
    for subc in subcs.keys():
        subcs[subc] = subc in args[0].lower() or args[0].lower() in subc

# load user defined variables
totals = xplib.totals()
xp_name = xplib.xp_name()
cc_name = xplib.cc_name()
if ch.cc_exists(cc_name):
    if not (get_svar('xp_no_warn') or get('xp_firstrun')):
        ch.set_cvar('xp_firstrun', 'Delete me if you want to see another warning :)')
        return f"""-title 'Warning' -desc '**No changes made.**
Running this command again will convert CC named `{cc_name}` into a cvar named `xp` and convert your xp log into a format incompatible with the old alias (although it is more compact).

This is done so that it works with the new alias as some of the formats have changed.

Ignore this warning if you are not using other older aliases to handle experience.'"""

# load xp and arguments for commands
xp = xplib.get_xp()
ch.delete_cvar('xp_firstrun')
ch.delete_cvar('xp_revert_firstrun')
out = []
check_args = int(subcs['set']) or ((len(args) > 1) and int(subcs['log']))
if args and not any(subcs[subc] for subc in ['chart', 'help?', 'options']):
    try:
        value = round(float('.'.join(args[check_args].replace(",", "").split('.')[:2])))
    except "ValueError":
        value = None
else:
    value = None

# set value to 0 when loading log
page_num = int(value) if value is not None else -1
page_num = page_num if page_num < 1 else page_num-1  # convert to index
value = 0 if subcs['log'] else value

# modifying and logging
if value:
    if subcs['set']:
        total, removed, added = xplib.set_xp(value, ' '.join([f"Total set to"]+ptargs.split(" ")[1:]), return_added=True)
    else:
        total, removed, added = xplib.modify_xp(value, ptargs, return_added=True)
    out += logtools.display_log_changes(added=added, removed=removed)
else:
    total = xp

# checking for level ups
_, required, _ = xplib.level()
next, next_total, next_needed = xplib.next_lvl()
ding = next_needed <= 0 if level < len(totals) else False

# add appropriate title, description, and footer
if value:
    if subcs['set']:
        title = f'{name} sets their {xp_name} total to {print_nice(value)}'
    else:
        title = f'{name} {"gains" if value>0 else "loses"} {print_nice(value).replace("-","")} {xp_name}'
    if ding:
        title += f" and levels up to {ordinal(next)} level!"
    else:
        title += "."
    desc = (
        f"""-desc ＂Your {xp_name} total needs to be at least {print_nice(required)} to match your current level!＂"""
        if total < totals[min(len(totals), level)-1] else
        f'''-desc ＂{"Don't forget" if ding else "You need"} to update your sheet with your proper level and run `!update`＂'''
        if level < len(totals) and total >= (totals[min(len(totals)-1, level)]) else ""
    )
elif subcs['log']:
    title = f"{name} checks their {xp_name} logs."
    log = logtools.get_log("xplog", ch)
    page, act_page_num, page_count = logtools.log_page(log, page_num)
    desc = f"""-desc ＂{page}＂ -f ＂Page {act_page_num+1}/{page_count}|Use `{cmd} log #` to view another page.＂"""
elif subcs['chart']:
    title = f"{name} checks the level chart!"
    desc = f"""-desc ＂{"`"*3}py{n}Level | Required {xp_name}{n}{"-"*(17+len(xp_name))}{n}{n.join([f"{len(totals) - totals[::-1].index(x):5} | {x}" for x in list(dict.fromkeys(totals))])}{"`"*3}＂"""
elif subcs['help?']:
    title = f"{name} wants more than what's in the footer!"
    desc = f"""-desc ＂`{cmd}` - Run without any arguments, this displays your current total and amount until next level.
`{cmd} # [notes]` - Adds to your {xp_name} total. You can include notes to be entered into the log. I will warn you that it is possible to make your log inaccessible if you enter detailed notes. You won't be able to manually access the cvar (`xplog`) once it gets above 2000 characters long (which is around the time it will overflow onto a second page in the alias) and if you get it to the point where it would go over 10,000 characters long, the alias will start deleting old logs unless cvar/svar `log_method` = `keep` is set. So keep your notes brief if you add them.
`{cmd} -# [notes]` - Removes {xp_name} from your total. Same deal with the notes.
`{cmd} set # [notes]` - Sets your {xp_name} total to the number provided. Shows up in the log with `set` included.
`{cmd} chart` - Pulls up a reference chart for the {xp_name} total required per level.
`{cmd} log` - Displays a log of all your {xp_name} gains, losses, and sets.
`{cmd} options` - displays the new options available to customize your xp display.＂"""
elif subcs['options']:
    desc = """-desc ＂Use a cvar or svar called `xptotals` to change XP totals required for level up. Increase or decrease the number of entries on this list to increase or decrease the level cap respectively. Use a comma separated list like so `1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20`. Prefers server choice. 
    (Default: `0,300,900,2700,6500,14000,23000,34000,48000,64000,85000,100000,120000,140000,165000,195000,225000,265000,305000,355000`)
Use a cvar or svar called `xpname` to change the name of your XP system. Prefers server choice.
    (Default: `Experience`)
Create an svar called `xp_no_warn` if you do not want any warnings about converting XP.
    (Default: `None`)
Use a cvar or svar called `xp_ccname` to change the name of the cc for your old XP system. Prefers server choice.
    (Default: `Experience`)
Use a cvar or uvar called `log_entries` to choose how many lines per page in the log.
    (Default: `15`)
Use a cvar or svar called `log_method` to choose how logs longer than 10,000 characters are handled.
`discard` will delete the oldest logs to make room for the new ones, displaying which log was removed, this is the default.
`keep` will keep the logs by splitting them into multiple cvars. This also has a limit at about 150,000 - 200,000, due to variable size limits, at which point it will behave like discard, deleting oldest log to make room, but is still much larger than the standard log.
Prefers user choice, unless the server prefixes their choice with `O:` like so `O:keep` to override the user choice.＂"""
else:
    title = f"{name} is currently {ordinal(level)} level!"
    desc = (
        f"""-desc ＂Your {xp_name} total needs to be at least {required:,} to match your current level!＂"""
        if total < totals[min(len(totals), level)-1] else
        f'''-desc ＂{"Don't forget" if ding else "You need"} to update your sheet with your proper level and run `!update`＂'''
        if level < len(totals) and total >= (totals[min(len(totals)-1, level)]) else ""
    )
out.append(f"-title ＂{title}＂")
out.append(desc)

next = next+ding
if not (subcs['chart'] or subcs['log'] or subcs['help?'] or subcs['options']):
    out.append(f'''-f "Current {xp_name}|{print_nice(total)}"''')
    if next > level:
        out.append(f'-f "Next Level: {next}|{print_nice(next_total)} *({print_nice(next_needed)} remaining)*"')
out.append(f"-footer '{cmd} | {cmd} # | {cmd} -# | {cmd} set # | {cmd} chart | {cmd} log | {cmd} help | {cmd} options'")
return ' '.join(out)
</drac2>
-color <color> -thumb <image>
