embed <drac2>
#Load constants and arguments
c = character()
args = [x for x in &ARGS&]
ptargs = "&*&"
n='\n'
counter="xp"
pargs = argparse(args)
t_since = 18262*24*60*60
    
#Load user defined variables
cmd = ctx.prefix+ctx.alias
xp_name = get_svar("xpname") or get("xpname",default="Experience")
cc_name = get_svar("xp_ccname") or get("xp_ccname",default="Experience")
c.set_cvar('xpname',xp_name) if get_svar("xpname") else ()
c.set_cvar('xptotals',",".join([str(x) for x in totals])) if get_svar("xptotals") else ()
if not get('xp_revert_firstrun'):
    c.set_cvar('xp_revert_firstrun','Delete me if you want to see another warning :)')
    return(f"-title 'Warning' -desc 'Running this command again will convert cvar named `xp` back into a CC named `{cc_name}` and revert your xp log into a format compatible with the old alias.{n*2}If you have partial xp stored it will be rounded down by this process. This process can be undone by running the new alias again.'")
#Load xp log
log = load_yaml(get('xplog','{}'))
if log == {} and 'xplog0' in c.cvars:
    i = 0
    templog = ''
    while f'xplog{i}' in c.cvars:
        templog += get(f'xplog{i}','')
        i += 1
    log = load_yaml(templog)

#Setup Calendar
calendar=load_json(get_gvar("1aec09a0-9e25-4700-9c2d-42d79cb0163b"))
monthLengths=[x.length for x in calendar.months]
hourOffset=int(calendar.get('hourOffset',0))+int(get('timezone',0))
baseYear=calendar.get("yearOffset",1970)

#Revert new log
if log and any([typeof(x) == "int" for x in list(log)]):
    newlog = {}
    for x in log:
        if typeof(x) == 'int':
            Time=x*60+t_since+(3600*hourOffset)
            totalDayCount=int((Time)//86400)
            yearsPassed=totalDayCount//calendar.length
            numLeapYears=len([x for x in range(baseYear,baseYear+yearsPassed-4) if x//calendar.get('leapCycle',4)==x/calendar.get('leapCycle',4)]) if calendar.get('leapCycle') else 0
            yearStartDay=yearsPassed*calendar.length+numLeapYears
            totalDays=totalDayCount-yearStartDay
            year=int((totalDayCount-numLeapYears-1)//calendar.length)+baseYear
            isLeapYear=year//calendar.get('leapCycle',4)==year/calendar.get('leapCycle',4) if numLeapYears else 0
            calendarDay=totalDays%(calendar.length+isLeapYear) or calendar.length+isLeapYear
            hour=int(Time%86400//3600)
            minute=int(Time%86400%3600//60)
            second=int(Time%86400%3600%60)
            monthLengths=[x.length+(isLeapYear and x.name==calendar.get('leapMonth','February')) for x in calendar.months]
            day,month=calendarDay,1
            [(day:=day-monthLengths[x],month:=month+1) for x in range(len(monthLengths)) if month>x and day>monthLengths[x]]
            timestamp=f'{day:02}.{month:02}.{str(year)[2:]} ({hour:02}:{minute:02}:{second:02})'
            newlog.update({timestamp: log[x]})
        else:
            newlog.update({x: log[x]})
    log = newlog
    
if len(dump_json(log)) > 9999:
    return(f"-title 'Warning' -desc 'Your log is too long to revert to the old format. Please manually remove some entries from the `xplog` cvar to continue.'")

c.set_cvar('xplog',dump_json(log))

#Recreate XP CC
c.create_cc_nx(cc_name,initial_value=int(float(get(counter))))

#Clear cvars
c.delete_cvar(counter)
if pargs.get("noclear") != None:
    c.delete_cvar('xp_revert_firstrun')
    c.delete_cvar('xp_firstrun')
    c.delete_cvar('xptotals')
    c.delete_cvar('xpname')
    c.delete_cvar('xp_ccname')
    c.delete_cvar('xp_ccname')

</drac2>
-color <color>
