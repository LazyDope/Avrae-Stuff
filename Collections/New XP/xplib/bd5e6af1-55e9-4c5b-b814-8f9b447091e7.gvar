def _update_old(ch=character()):
    """
    Converts CC into cvar.
    :var ch: the character default: character()
    """
    cc_name = _cc_name(ch)
    if ch.cc_exists(cc_name):
        if ch.get_cc(cc_name) > 0:
            ch.set_cvar_nx(counter,str(ch.get_cc(cc_name)))
        ch.delete_cc(cc_name)

def get_xp(ch=character()) -> float:
    """
    Load the XP or similar from the cvar.
    :var ch: the character default: character()
    :return: the XP or the like the current character has.
    :rtype: float
    """
    counter="xp"
    _update_old(ch)
    return float(ch.cvars.get(counter,"0"))
    
def set_xp(value: int|float, log_message: str=None, ch=character()) -> (float, [(int, str)]):
    """
    Sets the cvar to a new value.
    :arg int|float value: the new value
    :var str log_message: the message to be added to the log, `[value]` and `[total]` will be replaced with the input value default: None
    :var ch: the character default: character()
    :return: the value set and a list of the log messages removed, if any.
    :rtype: (float, [(int, str)])
    """
    counter="xp"
    _update_old(ch)
    value_str = _round_nicely(value)
    log_message = f"Set value to {value_str}" if log_message is None else str(log_message).replace("[value]", value_str).replace("[total]", value_str)
    removed = log(log_message, ch)
    ch.set_cvar(counter, value_str)
    return float(value_str), removed
    
def modify_xp(value: int|float, log_message: str=None, ch=character()) -> (float, [(int, str)]):
    """
    Modifies the cvar by the given value.
    :arg int|float value: value to modify by
    :var str log_message: the message to be added to the log, `[value]` will be replaced with the input value. `[total]` will be replaced with the total xp. default: None
    :var ch: the character default: character()
    :return: the new total and a list of the log messages removed, if any.
    :rtype: (float, [(int, str)])
    """
    counter="xp"
    c_val = get_xp(ch)
    new_val = c_val + value
    value_str = _round_nicely(value)
    new_str = _round_nicely(new_val)
    log_message = f"{value_str}" if log_message is None else str(log_message).replace("[value]", value_str).replace("[total]", new_str)
    removed = log(log_message, ch)
    ch.set_cvar(counter, new_str)
    return new_val, removed
    
def next_lvl(xp: float=None, ch=character()) -> (int, float, float):
    """
    Gets the next level for a character.
    :var float xp: the xp to compare for the difference, generally passed from another function. default: None
    :var ch: the character default: character()
    :return: the next level, the xp needed for the next level, and the difference between that and the current value.
    :rtype: (int, float, float)
    """
    totals = totals(ch)
    c_level = ch.levels.total_level
    xp = get_xp(ch) if xp is None else xp
    index = min(c_level, len(totals)-1)
    return index+1, float(totals[index]), float(totals[index]-xp)
    
def level(lvl: int=None, xp: float=None, ch=character()) -> (int, float, float):
    """
    Gets the values for a specific level.
    If `lvl` is given, will return itself, xp needed for that level, and the difference between that and given or current xp. If `xp` is present but `lvl` is not, will return what level a character would be if they had that much xp, itself, and the difference between the needed xp for that level, and the xp given. If neither are provided it will return the player's level, how much xp they needed to be that level, and how much xp they are above that.
    :var int lvl: the level you want information about default: None
    :var float xp: the xp value to override loading it again default: None
    :var ch: the character default: character()
    :return: A level, a total xp, and a difference between the level's xp and the total.
    :rtype: (int, float, float)
    """
    totals = totals(ch)
    if lvl is not None:
        index = min(int(lvl)-1, len(totals)-1)
        c_xp = get_xp(ch) if xp is None else xp
        xp = totals[index]
        xp_diff = xp - c_xp
    elif xp is not None:
        index, l_xp = max(enumerate(totals), key=lambda x: x[1] if x[1]<=xp else 0)
        lvl = index+1
        xp_diff = l_xp-xp
    else:
        lvl = ch.levels.total_level
        index = min(int(lvl)-1, len(totals)-1)
        xp = get_xp(ch)
        xp_diff = totals[index]-xp
    return lvl, float(xp), float(xp_diff)

def get_log(ch=character()) -> {int: str}:
    """
    Grabs the log cvars and returns as a single dict.
    :var ch: the character default: character()
    :return: a dict representing the character's full log
    :rtype: {int: str}
    """
    #Calculate Current Time
    t_since = 18262*24*60*60
    timestamp=round(time() - t_since)//60

    #Load xp log
    log = load_yaml(ch.get_cvar('xplog','{}'))
    if log == {} and 'xplog0' in ch.cvars:
        i = 0
        templog = ''
        while f'xplog{i}' in ch.cvars:
            templog += ch.get_cvar(f'xplog{i}','')
            i += 1
        log = load_yaml(templog)

    #Convert old log
    if log and any([typeof(x) == "str" for x in list(log)]):
        #Setup Calendar
        calendar=load_yaml(get_gvar("1aec09a0-9e25-4700-9c2d-42d79cb0163b"))
        monthLengths=[x.length for x in calendar.months]
        timezoneOffset=float(calendar.get('hourOffset',0))+float(get('timezone',0))
        
        newlog = {}
        for x in log:
            if typeof(x) == 'str':
                log_time = x.split(" ")
                clock = None
                if len(log_time) == 2:
                    date, clock = log_time
                else:
                    date = log_time[0]
                day, month, year = date.split(".")
                if clock:
                    hour, minute, second = clock.strip("()").split(":")
                else:
                    hour, minute, second = (0, 0, 0)
                t = int(second) + (int(minute) - int(timezoneOffset%1 * 60)) * 60 + (int(hour) - int(timezoneOffset)) * 3600 + int(day) * 24 * 3600
                t += (sum([monthLengths[x] for x in range(int(month)-1)]) + (int(month) > 2 and int(year) == 20)) * 24 * 3600
                t += ((int(year) - 20) * 365 + (int(year) > 20)) * 24 * 3600
                t = int(round(float(t) / 60.0))
            else:
                t = x
            newlog.update({t: f"{newlog[t]}; {log[x]}"}) if t in newlog else newlog.update({t: log[x]})
        log = newlog
        ch.set_cvar('xplog',dump_yaml(log))
    
    return log
    
def log(log_message: str, ch=character()) -> [(int, str)]:
    """
    Adds a log entry with a given message.
    :arg str log_message: the message to be added to the log
    :var ch: the character
    :return: a list of log entries that got removed
    :rtype: [(int, str)]
    """
    t_since = 18262*24*60*60
    log = get_log(ch)
    timestamp = round(time() - t_since)//60
    removed = []
    
    if timestamp in log:
        log_message = log[timestamp] + "; " + log_message
    while (len(dump_yaml(log)) + len(dump_yaml({timestamp:log_message}))) > 200000:
        removed.append((list(log)[0],log[list(log)[0]]))
        log.pop(list(log)[0])
    log.update({timestamp:log_message})
    removed += set_log(log, ch)
    return removed

def set_log(log, ch=character()) -> [(int, str)]:
    """
    Dumps the log to one or more cvars depending on its length, removing those that are too long.
    :arg str log: the dict representing the log to dump
    :var ch: the character
    :return: a list of removed log entries
    :rtype: [(int, str)]
    """
    removed = []
    if len(dump_yaml(log)) > 9999:
        valid_met = ['discard', 'keep']
        server_met = get_svar("log_method", "discard")
        user_met = ch.cvars.get("log_method", "")
        override = server_met.split(":")[0] == "O"
        server_met = (server_met.split(":")[1] if len(server_met.split(":")) > 1 else server_met)
        server_met = server_met if server_met in valid_met else 'discard'
        user_met = user_met if user_met in valid_met else ''
        log_method = override and server_met or user_met or server_met
        if log_method == 'keep':
            ch.delete_cvar('xplog')
            for i in range((len(dump_yaml(log))-1)//9999 + 1):
                ch.set_cvar(f'xplog{i}',dump_yaml(log)[9999*i:9999*(i+1)-1])
        else:
            while len(dump_yaml(log)) > 9999:
                removed.append((list(log)[0],log[list(log)[0]]))
                log.pop(list(log)[0])
            ch.set_cvar('xplog',dump_yaml(log))
    else:
        ch.set_cvar('xplog',dump_yaml(log))
    return removed

def log_to_epoch(log_time: int) -> int:
    """
    Converts log time into epoch time.
    Useful for displaying the log time in timestamps.
    :arg int log_time: the time stored in the log.
    :return: the time since epoch (00:00 UTC+0, January 1st, 1970), which is used in timestamps
    :rtype: int
    """
    t_since = 18262*24*60*60
    return log_time*60+t_since

def totals(ch=character()) -> [int]:
    """
    Gets the xp totals needed for each level.
    Also saves the server's totals to a cvar so they can be used in DMs.
    :var ch: the character
    :return: a list of integers representing the xp needed for each level
    :rtype: [int]
    """
    totals = [int(x.strip()) for x in ((svar := get_svar("xptotals")) or ch.get_cvar("xptotals","0,300,900,2700,6500,14000,23000,34000,48000,64000,85000,100000,120000,140000,165000,195000,225000,265000,305000,355000")).split(",")]
    ch.set_cvar('xptotals',svar) if svar else ()
    return totals

def xp_name(ch=character()) -> str:
    """
    Gets the xp name to be used.
    Also saves the server's name to a cvar so they can be used in DMs.
    :var ch: the character
    :return: the xp name
    :rtype: str
    """
    xp_name = (svar := get_svar("xpname")) or ch.get_cvar("xpname","Experience")
    ch.set_cvar('xpname',svar) if svar else ()
    return xp_name
    
def _cc_name(ch=character()) -> str:
    """
    Gets the CC name to be used, used in conversion process.
    :var ch: the character
    :return: the cc name
    :rtype: str
    """
    cc_name = get_svar("xp_ccname") or ch.get_cvar("xp_ccname","Experience")
    return cc_name

def _round_nicely(number, include_sign=True) -> str:
    """
    Makes the number look nice, regardless of whether it's an int or a float
    :arg number: an integer or float
    :return: the rounded number
    :rtype: str
    """
    return f'{number:+.2f}'.rstrip('0').rstrip('.')
