<drac2>
# load modules
using(dmplib="d82b1d4d-3127-44ee-8ba7-1d619d8a8b54",
      logtools="11743454-0aca-46a6-ad73-9b902a65fbeb",
      xplib="bd5e6af1-55e9-4c5b-b814-8f9b447091e7")

# set default variables
arg_list = ("-s", "-t", "-rate")
guild = None
out = ["embed", f"-footer ＂Try |{ctx.prefix}help {ctx.alias}| if you are having trouble＂"]
ch = character()

# load and parse args
args = &ARGS&
if not args:
    # args needed for this command
    return f"help {ctx.alias} set -here"
num = logtools.as_valid_number(args.pop(0)) if args else 0
num = num if num>0 else None
if not num:
    # positive number needed
    return f"help {ctx.alias} set -here"
pargs = argparse(args)
guild = pargs.last("s", type_=dmplib.to_id) or ctx.guild.id
if not guild:
    # trying to use in DMs without specifying a server to load from
    out.append("-title ＂No Server Available＂ -desc ＂If in DMs, please specify a server with `-s`＂")
    return ' '.join(out)
inp_dmp_type = pargs.last("t", type_=lambda x: dmplib.get_dmp_type(guild, x))
dmp_type = inp_dmp_type or dmplib.get_dmp_type(guild)
if not dmp_type:
    # server has really bad settings, shouldn't really happen
    out.append("-title ＂Invalid settings＂ -desc ＂No point types found. Please check with your server admins to fix this.＂")
    return ' '.join(out)
custom_rate = pargs.last("rate")
if custom_rate:
    custom_rate = dmplib.valid_pair(custom_rate)
    if not custom_rate:
        # custom rate was invalid
        out.append("-title ＂Invalid custom rate＂ -desc ＂The custom rate you entered was invalid, it must be in the format `#:#` where # are integer or decimal numbers.＂")
        return ' '.join(out)

# load settings for DM Point types
settings = dmplib.get_guild_settings(guild)
dmp_settings = settings['dmp_types']
if 'rate' not in dmp_settings[dmp_type] or dmp_settings[dmp_type]['rate'] is None and not custom_rate:
    # type doesn't have a rate, should not convert
    out.append("-title ＂Cannot convert＂ -desc ＂No rate found for the chosen type, cannot convert.＂")
    return ' '.join(out)

# try to convert the requested amount, reducting from DM Point type
plural_dmp = logtools.make_plural(dmp_type)
end_i = min((args.index(x) for x in arg_list if x in args), default=len(args))
msg = [f"{plural_dmp}: [value] to {ch.name}"]
if args[:end_i]:
    msg.append(' '.join(args[:end_i]))
if guild!=ctx.guild.id:
    msg.append("(added externally)")
if custom_rate:
    msg.append(f"(rate used: f{custom_rate[0]}:{custom_rate[1]}")
dmp_type_sets = dmp_settings[dmp_type]
rate = custom_rate or dmp_type_sets['rate']
num = num//rate[0] if all(typeof(x) == 'int' for x in rate) else num/rate[0]
success, added, removed = dmplib.modify_dmp(-num*rate[0], ' '.join(msg), dmp_type, guild)
msg[0] = f"[value] from {plural_dmp}"

if success is None:
    # input was outside limits
    out.append(f"""-title ＂Out of bounds!＂ -desc ＂Your server says you can't have that many {plural_dmp}.
At most you can have {dmp_type_sets['max']} and at minimum you can have {dmp_type_sets['min']}＂""")
    return ' '.join(out)

# append log changes to display
out.append(f"""-title ＂{ctx.author.display_name} converts some {plural_dmp}{f" for {settings['name']}" if guild!=ctx.guild.id else ''}＂""")
out += logtools.display_log_changes(plural_dmp, added, removed)

# add to XP
xp_name = xplib.xp_name(ch)
total_xp, removed, added = xplib.modify_xp(num*rate[1], ' '.join(msg), ch, return_added=True)
out += logtools.display_log_changes(xp_name, added, removed)
    
# load storage
storage = dmplib.get_dmp_storage()
serv_storage = dmplib.get_guild_storage(storage, guild)

# update converted
c_stor = serv_storage[dmp_type]
if 'converted' not in c_stor:
    c_stor['converted'] = 0.0
c_stor['converted'] += num*rate[0]
dmplib.update_storage(storage)

# display input DM Point type
plural_dmp = logtools.make_plural(dmp_type)
out.append(f"""-f ＂Current {plural_dmp}|{logtools.round_nicely(c_stor['current'], False)}{f"; Converted: {logtools.round_nicely(c_stor['converted'], False)}" if 'converted' in c_stor else ''}＂""")

out.append(f"""-f ＂Current {xp_name}|{logtools.round_nicely(total_xp, False)}＂""")
    
return ' '.join(out)
</drac2>

