<drac2>
additive = get('coinburse_additive')
args = &ARGS&
ptargs = "&*&"
bags = load_json(get('bags', '[]'))
bagsDict = dict(bags)
coinpouch_name = get_svar("coinPouchName") or get("coinPouchName",'Coin Pouch')
coins = bagsDict.get(coinpouch_name)
coin_types = ['cp','sp','ep','gp','pp']
coin_rates = load_json(get_svar("coinRates") or get("coinRates",dump_json({"cp":100,"sp":10,"ep":2,"gp":1,"pp":0.1})))
compat = get_svar('coinburse_compat') or get('coinburse_compat')
ch = character()
ch.set_cvar('coinburse_compat',compat) if get_svar("coinburse_compat") else ()
ch.set_cvar('coinPouchName',compat) if get_svar("coinPouchName") else ()
ch.set_cvar('coinRates',compat) if get_svar("coinRates") else ()
delta = parse_coins(ptargs) if ptargs and 'convert' not in ptargs else {}
n = "\n"

if coins and not compat:
    if get("coinburse_last_coins"):
        ch.delete_cvar('coinburse_last_coins')
        [coins.pop(coin) for coin in coin_types]
    elif additive:
        ch.coinpurse.modify_coins(coins.pop('pp'), coins.pop('gp'), coins.pop('ep'), coins.pop('sp'), coins.pop('cp'))
    elif not get('coinburse_firstrun') and not all([ch.coinpurse[coin] == coins[coin] for coin in coin_types]):
        ch.set_cvar('coinburse_firstrun','Delete me if you want to see another warning :)')
        return(f"embed -title 'Warning' -desc '**No changes made.**{n}Running this command again will overwrite the coins in your native `!g coins`/`character().coinpurse` with the coins in bag named `{coinpouch_name}`.{n*2}If you have not used `!g coins` then you can ignore this warning.{n*2}If you have already converted to the new system, run `{ctx.prefix}{ctx.alias} remove_old` to safely remove the coins from your bag first.'")
    else:
        ch.coinpurse.set_coins(coins.pop('pp'), coins.pop('gp'), coins.pop('ep'), coins.pop('sp'), coins.pop('cp'))
    if len(coins) > 0:
        if f'Old {coinpouch_name}' in bagsDict:
            bagsDict[f'Old {coinpouch_name}'].update(coins)
        else:
            bagsDict[f'Old {coinpouch_name}'] = coins
    bagsDict.pop(coinpouch_name)
    if bagsDict:
        ch.set_cvar('bags', dump_json(list(bagsDict.items())))
    else:
        ch.delete_cvar('bags')
    
ch.set_cvar('coinburse_additive','Do not remove this or I will overwrite your coinpurse')
    
if compat:
    coin_bag = coins or {coin: ch.coinpurse[coin] for coin in coin_types}
    last_coins = load_json(get("coinburse_last_coins")) if "coinburse_last_coins" in ch.cvars else {coin: ch.coinpurse[coin] for coin in coin_types}
    new_coins = {}
    for coin in coin_types:
        new_coins[coin] = ch.coinpurse[coin] + coin_bag[coin] - last_coins[coin]
    if sum([new_coins[coin]*coin_rates[coin] for coin in new_coins]) < 0:
        return f"""echo You are already in debt by {sum([float(new_coins[coin])/coin_rates[coin] for coin in new_coins])} gp, please resolve this manually with `!g coins` before continuing."""
    ch.coinpurse.set_coins(new_coins['pp'],new_coins['gp'],new_coins['ep'],new_coins['sp'],new_coins['cp'])
    
    for coin in delta:
        if delta[coin] and coin!='total':
            new_coins[coin] += delta[coin]
            
    if args and args[0] == 'convert':
        for coin in coin_types[1:]:
            smaller = coin_types[coin_types.index(coin)-1]
            rate = int(coin_rates[smaller]/coin_rates[coin])
            p = new_coins[smaller]//rate
            if new_coins[smaller] >= rate:
                new_coins.update({smaller:new_coins[smaller]-p*rate,coin:new_coins[coin]+p})
                
    for coin in coin_types[:-1]:
        larger = coin_types[coin_types.index(coin)+1]
        rate = int(coin_rates[coin]/coin_rates[larger])
        p = new_coins[coin]//rate
        if new_coins[coin] < 0:
            new_coins.update({larger:new_coins[larger]+p,coin:new_coins[coin]-p*rate})
    
    if coins:
        coins.update(new_coins)
    else:
        bagsDict[coinpouch_name] = new_coins
    ch.set_cvar('bags', dump_json(list(bagsDict.items())))
    ch.set_cvar('coinburse_last_coins', dump_json(new_coins))

if &ARGS& and (bs:=load_json(get('bagSettings', '{}'))) and 'openMode' in bs and bs.openMode=='None':
    n = '\n'
    out = []
    ch.coinpurse.modify_coins(delta.pp, delta.gp, delta.ep, delta.sp, delta.cp)
    for coin in delta:
        if delta[coin] and coin!='total':
            out.append(f"{' '.join(ch.coinpurse.coin_str(coin).split()[::2])}: ({delta[coin]:+})")
    return f"""embed -title "{name} {'collects some money' if delta.total>0 else 'spends some money'}!" -desc "{n.join(out)}" -footer !coins -thumb "https://i.imgur.com/auM9MBe.png"  """
else:
    return 'game coins &*&'
</drac2> 
